services:
  finance-admin:
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/sirius-finance-admin:latest
    build:
      dockerfile: docker/finance-admin/Dockerfile
    ports:
      - "8888:8888"
    environment:
      PORT: 8888
      PREFIX: /finance-admin
      SIRIUS_PUBLIC_URL: http://host.docker.internal:3000
      SIRIUS_URL: http://json-server:3000
      BACKEND_URL: http://finance-admin-api:8080
    healthcheck:
      test: wget -O /dev/null -S 'http://localhost:8888/finance-admin/health-check' 2>&1 | grep 'HTTP/1.1 200 OK' || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - json-server
      - finance-admin-api

  finance-admin-api:
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/sirius-finance-admin-api:latest
    build:
      dockerfile: docker/finance-admin-api/Dockerfile
    ports:
      - "8181:8080"
    environment:
      POSTGRES_CONN: sirius-db:5432
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: finance
      ASYNC_S3_BUCKET: opg-backoffice-async-uploads-local
      AWS_REGION: eu-west-1
      AWS_S3_ENDPOINT: http://localstack:4566
      AWS_BASE_URL: http://localstack:4566
      AWS_ACCESS_KEY_ID: localstack
      AWS_SECRET_ACCESS_KEY: localstack
      EVENT_BUS_NAME: local-main
      REPORTS_S3_BUCKET: opg-backoffice-finance-reports-local
      S3_ENCRYPTION_KEY: alias/aws/s3
    healthcheck:
      test: wget -O /dev/null -S 'http://localhost:8080/health-check' 2>&1 | grep 'HTTP/1.1 200 OK' || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      localstack:
        condition: service_healthy
      sirius-db:
        condition: service_healthy

  sirius-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: finance
    ports:
      - "5431:5432"
    volumes:
      - ./migrations/1_baseline.sql:/docker-entrypoint-initdb.d/1_baseline.sql
    healthcheck:
      test: pg_isready --username=user --dbname=finance
      interval: 5s
      timeout: 5s
      retries: 5

  finance-migration:
    image: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/sirius-finance-migration:latest
    depends_on:
      sirius-db:
        condition: service_healthy
    environment:
      DB_USER: user
      DB_PASSWORD: password
      DB_CONNECTION: sirius-db:5432
      DB_NAME: finance
      DB_SCHEMA: supervision_finance
    command: "up"

  localstack:
    image: localstack/localstack:3.8
    volumes:
      - "./scripts/localstack/init:/etc/localstack/init/ready.d"
      - "./scripts/localstack/wait:/scripts/wait"
    ports:
      - "4566:4566"
    environment:
      AWS_DEFAULT_REGION: eu-west-1
    healthcheck:
      test: bash /scripts/wait/healthcheck.sh
      interval: 20s
      timeout: 30s
      retries: 50
    restart: unless-stopped

  cypress:
    build:
      dockerfile: docker/cypress/Dockerfile
    command: [ "--headless", "-b", "electron" ]
    volumes:
      - ./cypress/screenshots:/root/cypress/screenshots:rw,delegated
      - ./cypress/logs:/root/cypress/logs:rw,delegated
    depends_on:
      finance-admin:
        condition: service_healthy

  go-lint:
    image: golangci/golangci-lint:v1.62.0
    working_dir: /go/src/app
    volumes:
      - ./:/go/src/app
      - ./.cache/golangci-lint/v1.53.3:/root/.cache
    command: golangci-lint run -v --timeout 5m

  trivy:
    image: aquasec/trivy:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.trivy-cache:/root/.cache
      - ./test-results:/test-results
      - ./.trivyignore:/.trivyignore
    environment:
      - TRIVY_DB_REPOSITORY=${TRIVY_DB_REPOSITORY}
      - TRIVY_JAVA_DB_REPOSITORY=${TRIVY_JAVA_DB_REPOSITORY}
      - TRIVY_USERNAME=${DOCKER_USERNAME}
      - TRIVY_PASSWORD=${DOCKER_PASSWORD}

  yarn:
    image: node:22-alpine3.19
    working_dir: /home/node/app
    entrypoint: yarn
    volumes:
      - ./finance-admin:/home/node/app

  json-server:
    build:
      dockerfile: docker/json-server/Dockerfile
    ports:
      - '3000:3000'
