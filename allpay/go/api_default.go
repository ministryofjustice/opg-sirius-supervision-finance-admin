// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * AllPay Direct Debit API
 *
 * API for managing Direct Debit mandates and schedules.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"CustomersSchemeCodeMandatesCreatePost": Route{
			strings.ToUpper("Post"),
			"/Customers/{SchemeCode}/Mandates/Create",
			c.CustomersSchemeCodeMandatesCreatePost,
		},
		"CustomersSchemeCodeVariableMandatesCreatePost": Route{
			strings.ToUpper("Post"),
			"/Customers/{SchemeCode}/VariableMandates/Create",
			c.CustomersSchemeCodeVariableMandatesCreatePost,
		},
		"CustomersSchemeCodeClientRefSurnameBankAccountsPut": Route{
			strings.ToUpper("Put"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/BankAccounts",
			c.CustomersSchemeCodeClientRefSurnameBankAccountsPut,
		},
		"CustomersSchemeCodeClientRefSurnameBankAccountsDelete": Route{
			strings.ToUpper("Delete"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/BankAccounts",
			c.CustomersSchemeCodeClientRefSurnameBankAccountsDelete,
		},
		"CustomersSchemeCodeClientRefSurnameBankAccountEmailPut": Route{
			strings.ToUpper("Put"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/BankAccountEmail",
			c.CustomersSchemeCodeClientRefSurnameBankAccountEmailPut,
		},
		"CustomersSchemeCodeClientRefSurnameBankAccountEmailDelete": Route{
			strings.ToUpper("Delete"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/BankAccountEmail",
			c.CustomersSchemeCodeClientRefSurnameBankAccountEmailDelete,
		},
		"CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPut": Route{
			strings.ToUpper("Put"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/BankAccountMobileNumber",
			c.CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPut,
		},
		"CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberDelete": Route{
			strings.ToUpper("Delete"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/BankAccountMobileNumber",
			c.CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberDelete,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesGet": Route{
			strings.ToUpper("Get"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates",
			c.CustomersSchemeCodeClientRefSurnameMandatesGet,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesPut": Route{
			strings.ToUpper("Put"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates",
			c.CustomersSchemeCodeClientRefSurnameMandatesPut,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesPost": Route{
			strings.ToUpper("Post"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates",
			c.CustomersSchemeCodeClientRefSurnameMandatesPost,
		},
		"CustomersSchemeCodeClientRefSurnameVariableMandatesPost": Route{
			strings.ToUpper("Post"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/VariableMandates",
			c.CustomersSchemeCodeClientRefSurnameVariableMandatesPost,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPost": Route{
			strings.ToUpper("Post"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates/AnnualRenewal",
			c.CustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPost,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesScheduleGet": Route{
			strings.ToUpper("Get"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates/Schedule",
			c.CustomersSchemeCodeClientRefSurnameMandatesScheduleGet,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesPaymentsGet": Route{
			strings.ToUpper("Get"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates/Payments",
			c.CustomersSchemeCodeClientRefSurnameMandatesPaymentsGet,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesScheduleFirstPaymentDateAmountDelete": Route{
			strings.ToUpper("Delete"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates/Schedule/{FirstPaymentDate}/{Amount}",
			c.CustomersSchemeCodeClientRefSurnameMandatesScheduleFirstPaymentDateAmountDelete,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesPaymentHistoryGet": Route{
			strings.ToUpper("Get"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates/PaymentHistory",
			c.CustomersSchemeCodeClientRefSurnameMandatesPaymentHistoryGet,
		},
		"CustomersSchemeCodeClientRefSurnameMandatesClosureDateDelete": Route{
			strings.ToUpper("Delete"),
			"/Customers/{SchemeCode}/{ClientRef}/{Surname}/Mandates/{ClosureDate}",
			c.CustomersSchemeCodeClientRefSurnameMandatesClosureDateDelete,
		},
		"CustomersSchemeCodeMandatesFailedPaymentsFromDateToDatePageNumberGet": Route{
			strings.ToUpper("Get"),
			"/Customers/{SchemeCode}/Mandates/FailedPayments/{FromDate}/{ToDate}/{PageNumber}",
			c.CustomersSchemeCodeMandatesFailedPaymentsFromDateToDatePageNumberGet,
		},
		"BankAccountsGet": Route{
			strings.ToUpper("Get"),
			"/BankAccounts",
			c.BankAccountsGet,
		},
	}
}

// CustomersSchemeCodeMandatesCreatePost - Create Mandate
func (c *DefaultAPIController) CustomersSchemeCodeMandatesCreatePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	customersSchemeCodeMandatesCreatePostRequestParam := CustomersSchemeCodeMandatesCreatePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeMandatesCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeMandatesCreatePostRequestRequired(customersSchemeCodeMandatesCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeMandatesCreatePostRequestConstraints(customersSchemeCodeMandatesCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeMandatesCreatePost(r.Context(), schemeCodeParam, customersSchemeCodeMandatesCreatePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeVariableMandatesCreatePost - Create Variable Mandate
func (c *DefaultAPIController) CustomersSchemeCodeVariableMandatesCreatePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	customersSchemeCodeVariableMandatesCreatePostRequestParam := CustomersSchemeCodeVariableMandatesCreatePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeVariableMandatesCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeVariableMandatesCreatePostRequestRequired(customersSchemeCodeVariableMandatesCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeVariableMandatesCreatePostRequestConstraints(customersSchemeCodeVariableMandatesCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeVariableMandatesCreatePost(r.Context(), schemeCodeParam, customersSchemeCodeVariableMandatesCreatePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameBankAccountsPut - Edit Bank Account Holder Details
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameBankAccountsPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	customersSchemeCodeClientRefSurnameBankAccountsPutRequestParam := CustomersSchemeCodeClientRefSurnameBankAccountsPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeClientRefSurnameBankAccountsPutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameBankAccountsPutRequestRequired(customersSchemeCodeClientRefSurnameBankAccountsPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameBankAccountsPutRequestConstraints(customersSchemeCodeClientRefSurnameBankAccountsPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameBankAccountsPut(r.Context(), schemeCodeParam, clientRefParam, surnameParam, customersSchemeCodeClientRefSurnameBankAccountsPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameBankAccountsDelete - Delete Bank Account Holder Details
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameBankAccountsDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameBankAccountsDelete(r.Context(), schemeCodeParam, clientRefParam, surnameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameBankAccountEmailPut - Edit Email Address
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameBankAccountEmailPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	customersSchemeCodeClientRefSurnameBankAccountEmailPutRequestParam := CustomersSchemeCodeClientRefSurnameBankAccountEmailPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeClientRefSurnameBankAccountEmailPutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameBankAccountEmailPutRequestRequired(customersSchemeCodeClientRefSurnameBankAccountEmailPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameBankAccountEmailPutRequestConstraints(customersSchemeCodeClientRefSurnameBankAccountEmailPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameBankAccountEmailPut(r.Context(), schemeCodeParam, clientRefParam, surnameParam, customersSchemeCodeClientRefSurnameBankAccountEmailPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameBankAccountEmailDelete - Delete Email Address
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameBankAccountEmailDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameBankAccountEmailDelete(r.Context(), schemeCodeParam, clientRefParam, surnameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPut - Edit Mobile Number
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	customersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequestParam := CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequestRequired(customersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequestConstraints(customersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberPut(r.Context(), schemeCodeParam, clientRefParam, surnameParam, customersSchemeCodeClientRefSurnameBankAccountMobileNumberPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberDelete - Delete Mobile Number
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameBankAccountMobileNumberDelete(r.Context(), schemeCodeParam, clientRefParam, surnameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesGet - Retrieve Mandate Information
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesGet(r.Context(), schemeCodeParam, clientRefParam, surnameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesPut - Add Immediate Payment Schedule
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	customersSchemeCodeClientRefSurnameMandatesPutRequestParam := CustomersSchemeCodeClientRefSurnameMandatesPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeClientRefSurnameMandatesPutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameMandatesPutRequestRequired(customersSchemeCodeClientRefSurnameMandatesPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameMandatesPutRequestConstraints(customersSchemeCodeClientRefSurnameMandatesPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesPut(r.Context(), schemeCodeParam, clientRefParam, surnameParam, customersSchemeCodeClientRefSurnameMandatesPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesPost - Add Payment Schedule to an Existing Mandate
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	customersSchemeCodeClientRefSurnameMandatesPostRequestParam := CustomersSchemeCodeClientRefSurnameMandatesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeClientRefSurnameMandatesPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameMandatesPostRequestRequired(customersSchemeCodeClientRefSurnameMandatesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameMandatesPostRequestConstraints(customersSchemeCodeClientRefSurnameMandatesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesPost(r.Context(), schemeCodeParam, clientRefParam, surnameParam, customersSchemeCodeClientRefSurnameMandatesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameVariableMandatesPost - Add Payment Schedule to an Existing Variable Mandate
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameVariableMandatesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	customersSchemeCodeClientRefSurnameVariableMandatesPostRequestParam := CustomersSchemeCodeClientRefSurnameVariableMandatesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeClientRefSurnameVariableMandatesPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameVariableMandatesPostRequestRequired(customersSchemeCodeClientRefSurnameVariableMandatesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameVariableMandatesPostRequestConstraints(customersSchemeCodeClientRefSurnameVariableMandatesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameVariableMandatesPost(r.Context(), schemeCodeParam, clientRefParam, surnameParam, customersSchemeCodeClientRefSurnameVariableMandatesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPost - Add Annual Renewal Schedule
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	customersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequestParam := CustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequestRequired(customersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequestConstraints(customersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesAnnualRenewalPost(r.Context(), schemeCodeParam, clientRefParam, surnameParam, customersSchemeCodeClientRefSurnameMandatesAnnualRenewalPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesScheduleGet - Retrieve Schedule Components
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesScheduleGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesScheduleGet(r.Context(), schemeCodeParam, clientRefParam, surnameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesPaymentsGet - Retrieve Payment Schedule
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesPaymentsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesPaymentsGet(r.Context(), schemeCodeParam, clientRefParam, surnameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesScheduleFirstPaymentDateAmountDelete - Remove Schedule Components
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesScheduleFirstPaymentDateAmountDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	firstPaymentDateParam := params["FirstPaymentDate"]
	if firstPaymentDateParam == "" {
		c.errorHandler(w, r, &RequiredError{"FirstPaymentDate"}, nil)
		return
	}
	amountParam, err := parseNumericParameter[int32](
		params["Amount"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "Amount", Err: err}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesScheduleFirstPaymentDateAmountDelete(r.Context(), schemeCodeParam, clientRefParam, surnameParam, firstPaymentDateParam, amountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesPaymentHistoryGet - Show Previous Collection History
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesPaymentHistoryGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesPaymentHistoryGet(r.Context(), schemeCodeParam, clientRefParam, surnameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeClientRefSurnameMandatesClosureDateDelete - Close Mandate
func (c *DefaultAPIController) CustomersSchemeCodeClientRefSurnameMandatesClosureDateDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	clientRefParam := params["ClientRef"]
	if clientRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClientRef"}, nil)
		return
	}
	surnameParam := params["Surname"]
	if surnameParam == "" {
		c.errorHandler(w, r, &RequiredError{"Surname"}, nil)
		return
	}
	closureDateParam := params["ClosureDate"]
	if closureDateParam == "" {
		c.errorHandler(w, r, &RequiredError{"ClosureDate"}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeClientRefSurnameMandatesClosureDateDelete(r.Context(), schemeCodeParam, clientRefParam, surnameParam, closureDateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomersSchemeCodeMandatesFailedPaymentsFromDateToDatePageNumberGet - Retrieve Failed Payments
func (c *DefaultAPIController) CustomersSchemeCodeMandatesFailedPaymentsFromDateToDatePageNumberGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeCodeParam := params["SchemeCode"]
	if schemeCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"SchemeCode"}, nil)
		return
	}
	fromDateParam := params["FromDate"]
	if fromDateParam == "" {
		c.errorHandler(w, r, &RequiredError{"FromDate"}, nil)
		return
	}
	toDateParam := params["ToDate"]
	if toDateParam == "" {
		c.errorHandler(w, r, &RequiredError{"ToDate"}, nil)
		return
	}
	pageNumberParam, err := parseNumericParameter[int32](
		params["PageNumber"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "PageNumber", Err: err}, nil)
		return
	}
	result, err := c.service.CustomersSchemeCodeMandatesFailedPaymentsFromDateToDatePageNumberGet(r.Context(), schemeCodeParam, fromDateParam, toDateParam, pageNumberParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BankAccountsGet - Modulus Check
func (c *DefaultAPIController) BankAccountsGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var sortcodeParam string
	if query.Has("sortcode") {
		param := query.Get("sortcode")

		sortcodeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "sortcode"}, nil)
		return
	}
	var accountnumberParam string
	if query.Has("accountnumber") {
		param := query.Get("accountnumber")

		accountnumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "accountnumber"}, nil)
		return
	}
	result, err := c.service.BankAccountsGet(r.Context(), sortcodeParam, accountnumberParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
